name: Enhanced Tests with Reporting

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-html allure-pytest
    
    - name: Run tests with comprehensive reporting
      run: |
        pytest tests/ \
          -v \
          --tb=short \
          --junitxml=test-results.xml \
          --html=test-report.html \
          --self-contained-html \
          --cov=oas_cli \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --alluredir=allure-results
    
    - name: Generate Allure Report
      if: always()
      run: |
        pip install allure-pytest
        allure generate allure-results --clean -o allure-report
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          test-results.xml
          test-report.html
          htmlcov/
          allure-report/
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Comment test results on PR
      uses: EnricoMi/publish-test-results@v2
      if: always() && github.event_name == 'pull_request'
      with:
        files: test-results.xml
        comment_title: "ðŸ§ª Test Results - Python ${{ matrix.python-version }}"
        check_name: "Test Results (Python ${{ matrix.python-version }})"
        report_individual_runs: true
        dedupe_classes_by_file_name: false

  test-summary:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts
    
    - name: Generate test summary
      run: |
        echo "## ðŸ§ª Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Categories" >> $GITHUB_STEP_SUMMARY
        echo "- **Behavioral Contract Tests**: Validate contracts work across all engines" >> $GITHUB_STEP_SUMMARY
        echo "- **Multi-Engine Tests**: Ensure OpenAI/Claude/Custom/Local compatibility" >> $GITHUB_STEP_SUMMARY  
        echo "- **Generator Tests**: Validate code generation and file creation" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: End-to-end validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Key Benefits" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Zero API costs (mock-based testing)" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Multi-engine validation" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Behavioral contract enforcement" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Production-ready CI/CD" >> $GITHUB_STEP_SUMMARY